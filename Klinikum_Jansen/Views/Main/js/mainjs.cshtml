<script>
    window.onload = function () {
        @Html.Partial("~/Views/Main/js/GlobalData.js")
        @Html.Partial("~/Views/Main/js/GlobalMethods.js")
        @Html.Partial("~/Views/Main/js/WebSocket.js")

        GM.GetNotfalls();

        /*Vue.component('VariantComp', {
            props: ['Answer', 'Question'],
            template: `<div><input type="radio"  v-bind:id="'answ_'+Answer.Id" v-bind:value="Answer.Id" v-bind:v-model="GM().getAnswersModel(Answer.QuestionId)">` +
                      `<label v-bind:for="'answ_'+Answer.Id">{{Answer.Answer}}</label></div>`,
            data: function () {
                return GD;
            },
            events: {},
            methods: {
                GM: function () {
                    return GM;
                }
            },
            created: function () {
                GD.AnswersModel[this.Answer.QuestionId] = "";
            }
        });

        //GD.AnswersModel[4] = "";*/
        Vue.component('ColFormule', {
            props: ['NotfallId','Column'],
            template: '<span>{{GetData}}</span>',
            computed: {
                GetData:{
                    get: function () {
                        //console.log(this.Column);
                        var d = _.findWhere(GD.Statistik.Columns, { "Id": this.Column.Id.toString()});
                        //console.log(d);
                        return d["Formule"];
                    }
                }
            },
        });

        var IndexPage = {
            template: `@Html.Partial("~/Views/Main/Templates/About.cshtml")`
        };

        var SettingsPage = {
            template: `@Html.Partial("~/Views/Main/Templates/Settings.cshtml")`,
            data: function () {
                return GD;
            },
            events: {},
            methods: {
                GM: function () {
                    return GM;
                }
            },
            created: function () {
            }
        };

        var PatientsPage = {
            template: `@Html.Partial("~/Views/Main/Templates/Patienten.cshtml")`,
            data: function () {
                return GD;
            },
            events: {},
            methods: {
                GM: function () {
                    return GM;
                }
            },
            created: function () {
            }
        };
        var NotfallePage = {
            template: `@Html.Partial("~/Views/Main/Templates/Notfalle.cshtml")`,
            data: function () {
                return GD;
            },
            events: {},
            methods: {
                GM: function () {
                    return GM;
                },
                NotfallChanged: function (id) {
                    GM.NotfallChanged(id);
                }
            },
            created() {
                this.NotfallChanged(this.$route);

            },
            watch: {
                '$route':function(to, from) {
                    //if (from.query.tab = !to.query.tab) { }
                }
            }
        };
        /*var NotfallPage = {

             data: function () {
                return GD;
            },
            events: {},
            methods: {
                GM: function () {
                    return GM;
                }
            },
            created: function () {
                if (this.$route.query.tab != undefined) {
                    $("#Notfall_Tab_Panel_" + this.$route.query.tab).click();
                }
            },
            watch: {
                '$route': function (to, from) {
                    //if (from.query.tab != undefined) { console.log("---"); }
                }
            }
        };*/
        var NotfallNewPage = {
            template: `@Html.Partial("~/Views/Main/Templates/NotfallNew.cshtml")`,
            data: function () {
                return GD;
            },
            events: {},
            methods: {
                GM: function () {
                    return GM;
                }
            },
            created: function () {
            },
            watch: {
                '$route': function (to, from) {
                    //if (from.query.tab != undefined) { console.log("---"); }
                }
            }
        };

        var StatistikPage= {
            template: `@Html.Partial("~/Views/Main/Templates/Statistik.cshtml")`,
            data: function () {
                return GD;
            },
            events: {},
            methods: {
                GM: function () {
                    return GM;
                }
            },
            created: function () {
                GM.Get_Statistik_Data();
                /*if (this.$route.query.tab != undefined) {
                    $("#Statistik_Tab_Panel_" + this.$route.query.tab).click();
                }*/
            },
            watch: {
                '$route': function (to, from) {
                    //if (from.query.tab != undefined) { console.log("---"); }
                }
            }
        };

        Vue.component('animated_integer', {
            template: '<span>{{ tweeningValue }}</span>',
            props: {
                value: {
                    required: true
                }
            },
            data: function () {
                return {
                    tweeningValue: 0
                }
            },
            watch: {
                value: function (newValue, oldValue) {
                    this.tween(oldValue, newValue)
                }
            },
            mounted: function () {
                this.tween(0, this.value)
            },
            methods: {
                tween: function (startValue, endValue) {
                    var vm = this
                    var animationFrame
                    function animate(time) {
                        TWEEN.update(time)
                        animationFrame = requestAnimationFrame(animate)
                    }
                    new TWEEN.Tween({ tweeningValue: startValue })
                        .to({ tweeningValue: endValue }, 1300)
                        .onUpdate(function () {
                            vm.tweeningValue = this.tweeningValue.toFixed(0)
                        })
                        .onComplete(function () {
                            cancelAnimationFrame(animationFrame)
                        })
                        .start()
                    animationFrame = requestAnimationFrame(animate)
                }
            }
        });

        var routes = [
            { path: '/', component: IndexPage, name: "IndexPage" },
            { path: '/patients', component: PatientsPage, name: "PatientsPage" },
            {path: '/notfalls', component: NotfallePage, name: "NotfallPage",
                /*children: [
                    {
                        path: ':NotfallId',
                        component: NotfallPage,
                        name: 'NotfallPage1' ,//+ function () { if (this.$route.params.NotfallId == undefined) { return 0 } else { return this.$route.params.NotfallId } },
                        onEnter: function () {
                            //console.log("--======-");
                            //console.log($router.params.userId);
                        },
                        created: function () {
                        }
                    }
                ]*/
            },
            { path: '/notfall/new', component: NotfallNewPage, name: "NotfallNewPage" },
            { path: '/statistik', component: StatistikPage, name: "StatistikPage" },
            { path: '/settings', component: SettingsPage, name: "SettingsPage" }
            
        ];
        var router = new VueRouter({ mode: 'history', routes });



        var app = new Vue({
            router,
            el: '#app',
            data: function () {
                return GD;
            },
            components: {
            },
            events: {},
            methods: {
                GM: function () {
                    return GlobalMethods;
                },
                ServerConnect: function () {
                    //GlobalData.connection = ReconnectToServer(GlobalData);
                }
            },
            created: function () {

            }/*,
            watch: {
                '$route'(to, from) {
                    //console.log('Router from-' + to.path + '  to- ' + from.path);
                    //console.log($rout.params);
                }
            }*/
        });


    }

</script>